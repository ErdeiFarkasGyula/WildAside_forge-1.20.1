using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace SubstiliumMushroomCapGenerator {
    internal class Program {
        static void Main(string[] args) {
            int r = int.Parse(Console.ReadLine());
            double m_cap = double.Parse(Console.ReadLine());
            //int m_trunk = int.Parse(Console.ReadLine());

            Random rand = new Random();

            double modifier = rand.NextDouble();
            Console.WriteLine(modifier);
            int b_i = 0;
            int b_j = 0;


            List<int> vine_positions = new List<int>();
            List<string> sorok = new List<string>();
            List<List<string>> szarok = new List<List<string>>();

            string sor = "";

            for (int x = 0; x < 2 * r - 1; x ++) {
                Console.WriteLine();
                sor = "";
                sorok = new List<string>();
                for (int i = Convert.ToInt16(m_cap) - 1; i >= 0; i--) {
                    //Console.WriteLine($"i: {i}");
                    Console.WriteLine();
                    for (int j = 1; j < r * 2; j++) {
                        //Console.WriteLine($"j: {j}");
                        if (j == r && x == r - 1) {
                            sor += "T";
                            Console.Write("T");
                        } else {
                            double general = rand.NextDouble();
                            if (general < i / (m_cap + modifier)) {
                                if (j == b_j && vine_positions.Contains(i)) {
                                    sor += "V";
                                    Console.Write("V");
                                    vine_positions.Remove(i);
                                }
                                else {
                                    double block = rand.NextDouble();
                                    if (block < 0.5) {
                                        sor += "B";
                                        Console.Write("B");
                                    }
                                    else 
                                    if (block < 0.8) {
                                        sor += "G";
                                        Console.Write("G");
                                    }
                                    else {
                                        sor += "L";
                                        Console.Write("L");
                                    }

                                }


                            }
                            else {
                                sor += "X";
                                Console.Write("X");

                            }


                        }
                    }
                    sorok.Add(sor);
                    sor = "";
                }
                szarok.Add(sorok);
            }

            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            Console.WriteLine();
            for (int i = 0; i < szarok.Count; i++) {
                for (int j = 0; j < szarok[i].Count; j++) {
                    Console.WriteLine(szarok[i][j]);
                }
                Console.WriteLine();
            }
                Console.ReadKey();
        }
    }
}
